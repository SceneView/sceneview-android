package io.github.sceneview.ar.node

import android.graphics.Bitmap
import com.google.ar.core.AugmentedImage
import com.google.ar.core.AugmentedImageDatabase
import io.github.sceneview.SceneView
import io.github.sceneview.ar.ArSceneView
import io.github.sceneview.ar.arcore.isTracking

/**
 * AR Augmented Image positioned 3D model node
 *
 * ARCore can estimate the pose of the physical image at runtime as soon as ARCore detects the
 * physical image, without requiring the user to move the device to view the physical image from
 * different viewpoints. Note that ARCore will refine the estimated size and pose of the physical
 * image as it is viewed from different viewpoints.
 *
 * You can add a single named image to the augmented image database from an Android bitmap per node
 * at runtime or can manage your own [AugmentedImageDatabase] and configure the session with it:
 * Call [com.google.ar.core.Config.setAugmentedImageDatabase], provide the image name to the node
 * and skip bitmap parameter
 *
 * An image database supports up to 1000 images and can be generated by the `arcoreimg` command-line
 * database generation tool provided in the ARCore SDK, or dynamically created at runtime by adding
 * individual images to an AugmentedImageDatabase.
 *
 * Only one image database can be active in a session. Any images in the currently active image
 * database that have a TRACKING/PAUSED state will immediately be set to the STOPPED state if a
 * different or null image database is made active in the current session Config
 *
 * @param imageName Name metadata for this image, does not have to be unique.
 * @param bitmap Bitmap containing the image in ARGB_8888 format. The alpha channel is ignored
 * in this bitmap, as only non-transparent images are currently supported.
 * Pass null if you handle the database by yourself using
 * [com.google.ar.core.Config.setAugmentedImageDatabase]
 * @param widthInMeters Width in meters for this image, must be strictly greater than zero.
 * If the physical size of the image is known, use this parameter, to improve image detection
 * time. Null means you don't know the image size in real world
 * @param onError Called on ARCore Augmented image error
 * - Throws [com.google.ar.core.exceptions.ImageInsufficientQualityException]
 * if the image quality is insufficient, e.g. if the image has not enough features.
 * - Throws [java.lang.IllegalArgumentException] if the bitmap is not in ARGB_888 format or the
 * width in meters is less than or equal to zero.
 * @param onUpdate Invoked when the ARCore AugmentedImage TrackingState and/or
 * TrackingMethod is updated. The callback will be invoked on each AugmentedImage update with
 * the given [imageName].
 * @see AugmentedImage.isTracking
 * @see AugmentedImage.getTrackingState
 * @see AugmentedImage.getTrackingMethod
 */
open class AugmentedImageNode(
    val imageName: String,
    val bitmap: Bitmap? = null,
    val widthInMeters: Float? = null,
    var onError: ((exception: Exception) -> Unit)? = null,
    var onUpdate: ((node: AugmentedImageNode, augmentedImage: AugmentedImage) -> Unit)? = null
) : ArNode() {

    /**
     * The augmented image where this node will be placed (anchored)
     */
    var augmentedImage: AugmentedImage? = null
        set(value) {
            field = value
            if (value != null) {
                if (value.isTracking && anchor == null) {
                    anchor = value.createAnchor(value.centerPose)
                }
                onUpdate?.invoke(this, value)
            }
        }

    open val isTracking: Boolean
        get() = augmentedImage?.isTracking == true


    override val isVisibleInHierarchy: Boolean
        get() = super.isVisibleInHierarchy && isTracking

    init {
        onAnchorChanged = {
            updateVisibility()
        }
    }

    override fun onAttachedToScene(sceneView: SceneView) {
        super.onAttachedToScene(sceneView)

        if (sceneView is ArSceneView) {
            sceneView.onAugmentedImageUpdate += ::onAugmentedImageUpdate
            if (bitmap != null) {
                sceneView.configureSession { session, config ->
                    try {
                        config.augmentedImageDatabase = config.augmentedImageDatabase?.takeIf {
                            // Using the default augmentedImageDatabase even if not null is not
                            // working so we check if it's our AugmentedImageDatabase (if we already
                            // added images)
                            it.numImages > 0
                        } ?: AugmentedImageDatabase(session).apply {
                            if (widthInMeters != null) {
                                addImage(imageName, bitmap, widthInMeters)
                            } else {
                                addImage(imageName, bitmap)
                            }
                        }
                    } catch (exception: Exception) {
                        onError?.invoke(exception)
                    }
                }
            }
        }
    }

    override fun onDetachedFromScene(sceneView: SceneView) {
        super.onDetachedFromScene(sceneView)
        (sceneView as? ArSceneView)?.let { it.onAugmentedImageUpdate -= ::onAugmentedImageUpdate }
    }

    private fun onAugmentedImageUpdate(augmentedImage: AugmentedImage) {
        if (augmentedImage.name == imageName) {
            this.augmentedImage = augmentedImage
        }
    }
}